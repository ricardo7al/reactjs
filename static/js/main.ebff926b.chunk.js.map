{"version":3,"sources":["components/Loading.js","components/ListUsers.js","components/ListUsersV2.js","components/Buttons.js","components/Car.js","App.js","serviceWorker.js","index.js"],"names":["Loading","props","text","data","title","time","ListUsers","listUsers","console","log","map","name","index","key","ListUsersV2","users","user","years","Buttons","fnShowName","onClick","Car","useState","started","setStarted","countKm","setCountKm","useEffect","document","style","color","num","alert","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAEe,SAASA,EAAQC,GAAQ,IAC9BC,EAASD,EAATC,KACAC,EAASF,EAATE,KAER,OACE,6BACE,4BAAKD,GAEL,4BAAKC,EAAKC,OAEV,kDAAwBD,EAAKE,KAA7B,eCVS,SAASC,EAAUL,GAAQ,IAChCM,EAAcN,EAAdM,UAGR,OAFAC,QAAQC,IAAIR,GAGV,6BACE,sDACA,4BACGM,EAAUG,KAAI,SAACC,EAAMC,GAAP,OACb,wBAAIC,IAAKD,GAAQD,QCTZ,SAASG,EAAYb,GAAQ,IAClCc,EAAUd,EAAVc,MAER,OACE,6BACE,kDACA,4BACGA,EAAML,KAAI,SAACM,EAAMJ,GAAP,OACT,wBAAIC,IAAKD,GACNI,EAAKL,KADR,MACiBK,EAAKC,MADtB,iBCRK,SAASC,EAAQjB,GAAQ,IAC9BkB,EAAelB,EAAfkB,WAER,OACE,6BACE,4BAAQC,QAAS,kBAAMD,EAAW,wBAAlC,W,WCLS,SAASE,IAAO,IAAD,EACEC,oBAAS,GADX,mBACrBC,EADqB,KACZC,EADY,OAEEF,mBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,KAI5BC,qBAAU,WACRC,SAASxB,MAAT,eAAyBmB,KACxB,CAACA,IAiBJ,OACE,6BACE,kDAhBEA,EACK,0BAAMM,MAAO,CAAEC,MAAO,UAAtB,aAEF,0BAAMD,MAAO,CAAEC,MAAO,QAAtB,aAaL,KACA,yDAA4BL,EAA5B,QACA,4BACEL,QAAS,WACPI,GAAYD,KAFhB,qBAQA,4BACEH,QAAS,WArBI,IAAAW,IAsBA,EArBbR,EACFG,EAAWD,EAAUM,GAErBC,MAAM,0BAgBN,8BCoDSC,MAlFf,WAoCE,OACE,yBAAKC,UAAU,OACb,mDAEA,4DAIA,kBAAClC,EAAD,CAASG,KA3CG,CACdC,MAAO,0BACPC,KAAM,KA2CJ,gEAEA,kBAACC,EAAD,CAAWC,UA1CD,CACZ,mBACA,iBACA,kBACA,qBACA,iBACA,iBACA,eACA,sBACA,oBACA,wBAkCE,kBAACO,EAAD,CAAaC,MA/BC,CAChB,CAAEJ,KAAM,mBAAoBM,MAAO,IACnC,CAAEN,KAAM,iBAAkBM,MAAO,IACjC,CAAEN,KAAM,kBAAmBM,MAAO,IAClC,CAAEN,KAAM,qBAAsBM,MAAO,IACrC,CAAEN,KAAM,iBAAkBM,MAAO,IACjC,CAAEN,KAAM,iBAAkBM,MAAO,IACjC,CAAEN,KAAM,eAAgBM,MAAO,IAC/B,CAAEN,KAAM,sBAAuBM,MAAO,IACtC,CAAEN,KAAM,oBAAqBM,MAAO,IACpC,CAAEN,KAAM,qBAAsBM,MAAO,OAuBnC,8DAEA,kBAACC,EAAD,CAASC,WAtBW,WACtBX,QAAQC,IAAI,yBAuBV,mEAEA,kBAACY,EAAD,QCrDcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.ebff926b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Loading(props) {\r\n  const { text } = props;\r\n  const { data } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{text}</h2>\r\n\r\n      <h2>{data.title}</h2>\r\n\r\n      <small>Tiempo estimado {data.time} segundos.</small>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ListUsers(props) {\r\n  const { listUsers } = props;\r\n  console.log(props);\r\n\r\n  return (\r\n    <div>\r\n      <h2> Lista de trabajadores</h2>\r\n      <ul>\r\n        {listUsers.map((name, index) => (\r\n          <li key={index}>{name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ListUsersV2(props) {\r\n  const { users } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2> Lista de usuario </h2>\r\n      <ul>\r\n        {users.map((user, index) => (\r\n          <li key={index}>\r\n            {user.name} - {user.years} a침os\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Buttons(props) {\r\n  const { fnShowName } = props;\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => fnShowName(\"Guillermo Valverde\")}> Clic </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function Car() {\r\n  const [started, setStarted] = useState(false);\r\n  const [countKm, setCountKm] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = `auto ${started}`;\r\n  }, [started]);\r\n\r\n  const checkStateCar = () => {\r\n    if (started) {\r\n      return <span style={{ color: \"green\" }}>encendido</span>;\r\n    }\r\n    return <span style={{ color: \"red\" }}>encendido</span>;\r\n  };\r\n\r\n  const increaseKm = num => {\r\n    if (started) {\r\n      setCountKm(countKm + num);\r\n    } else {\r\n      alert(\"El auto esta apagado\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Nuestro auto esta: {checkStateCar()} </h2>\r\n      <h2>Kil칩metros recorridos: {countKm} km </h2>\r\n      <button\r\n        onClick={() => {\r\n          setStarted(!started);\r\n        }}\r\n      >\r\n        Encender / Apagar\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          increaseKm(5);\r\n        }}\r\n      >\r\n        Incrementar Kil칩metros\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Loading from \"./components/Loading\";\nimport ListUsers from \"./components/ListUsers\";\nimport ListUsersV2 from \"./components/ListUsersV2\";\nimport Buttons from \"./components/Buttons\";\nimport Car from \"./components/Car\";\n\nfunction App() {\n  const textObj = {\n    title: \"Terminando ejecuci칩n\",\n    time: 6\n  };\n\n  const users = [\n    \"Federico Vazquez\",\n    \"Marco Llorente\",\n    \"Alejandro Gomez\",\n    \"Guillermo Valverde\",\n    \"Fernando Ortiz\",\n    \"Maria Gonzalez\",\n    \"Isabel Pardo\",\n    \"Victoria Valenzuela\",\n    \"Alejandra Paredes\",\n    \"Fernanda Sepulveda\"\n  ];\n\n  const employees = [\n    { name: \"Federico Vazquez\", years: 35 },\n    { name: \"Marco Llorente\", years: 27 },\n    { name: \"Alejandro Gomez\", years: 42 },\n    { name: \"Guillermo Valverde\", years: 55 },\n    { name: \"Fernando Ortiz\", years: 64 },\n    { name: \"Maria Gonzalez\", years: 32 },\n    { name: \"Isabel Pardo\", years: 56 },\n    { name: \"Victoria Valenzuela\", years: 24 },\n    { name: \"Alejandra Paredes\", years: 37 },\n    { name: \"Fernanda Sepulveda\", years: 72 }\n  ];\n\n  const showNameConsole = () => {\n    console.log(\"Guillermo Valverde\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Lista de ejercicios</h1>\n\n      <h2>Ejercicio #1 - mandar props </h2>\n\n      {/*<Loading text=\"Cargando...\" />*/}\n\n      <Loading data={textObj} />\n\n      <h2>Ejercicio #2 - Manejo de Arrays </h2>\n\n      <ListUsers listUsers={users} />\n\n      <ListUsersV2 users={employees} />\n\n      <h2>Ejercicio #3 - Uso de Buttons </h2>\n\n      <Buttons fnShowName={showNameConsole} />\n\n      <h2>Ejercicio #4 - Manejo de HookState </h2>\n\n      <Car />\n\n      {/*\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n\n      */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}